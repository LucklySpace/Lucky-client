// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: im_connect.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "im";

export interface IMConnectMessage {
  code: number;
  token: string;
  data: Any | undefined;
  metadata: { [key: string]: string };
  message: string;
  requestId: string;
  timestamp: number;
  clientIp: string;
  userAgent: string;
  deviceName: string;
  deviceType: string;
}

export interface IMConnectMessage_MetadataEntry {
  key: string;
  value: string;
}

function createBaseIMConnectMessage(): IMConnectMessage {
  return {
    code: 0,
    token: "",
    data: undefined,
    metadata: {},
    message: "",
    requestId: "",
    timestamp: 0,
    clientIp: "",
    userAgent: "",
    deviceName: "",
    deviceType: ""
  };
}

export const IMConnectMessage: MessageFns<IMConnectMessage> = {
  encode(message: IMConnectMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.data !== undefined) {
      Any.encode(message.data, writer.uint32(26).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      IMConnectMessage_MetadataEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.message !== "") {
      writer.uint32(42).string(message.message);
    }
    if (message.requestId !== "") {
      writer.uint32(50).string(message.requestId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).int64(message.timestamp);
    }
    if (message.clientIp !== "") {
      writer.uint32(66).string(message.clientIp);
    }
    if (message.userAgent !== "") {
      writer.uint32(74).string(message.userAgent);
    }
    if (message.deviceName !== "") {
      writer.uint32(82).string(message.deviceName);
    }
    if (message.deviceType !== "") {
      writer.uint32(90).string(message.deviceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IMConnectMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIMConnectMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = IMConnectMessage_MetadataEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.metadata[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.clientIp = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.deviceName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.deviceType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<IMConnectMessage>, I>>(base?: I): IMConnectMessage {
    return IMConnectMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IMConnectMessage>, I>>(object: I): IMConnectMessage {
    const message = createBaseIMConnectMessage();
    message.code = object.code ?? 0;
    message.token = object.token ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Any.fromPartial(object.data) : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.message = object.message ?? "";
    message.requestId = object.requestId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.clientIp = object.clientIp ?? "";
    message.userAgent = object.userAgent ?? "";
    message.deviceName = object.deviceName ?? "";
    message.deviceType = object.deviceType ?? "";
    return message;
  }
};

function createBaseIMConnectMessage_MetadataEntry(): IMConnectMessage_MetadataEntry {
  return { key: "", value: "" };
}

export const IMConnectMessage_MetadataEntry: MessageFns<IMConnectMessage_MetadataEntry> = {
  encode(message: IMConnectMessage_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IMConnectMessage_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIMConnectMessage_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<IMConnectMessage_MetadataEntry>, I>>(base?: I): IMConnectMessage_MetadataEntry {
    return IMConnectMessage_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IMConnectMessage_MetadataEntry>, I>>(
    object: I
  ): IMConnectMessage_MetadataEntry {
    const message = createBaseIMConnectMessage_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  }
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
      : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;

  decode(input: BinaryReader | Uint8Array, length?: number): T;

  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;

  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
